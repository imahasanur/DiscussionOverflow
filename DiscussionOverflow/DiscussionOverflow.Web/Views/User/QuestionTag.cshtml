@model QuestionTagModel;
@{
    ViewData["Title"] = "Tags";
}

<partial name="_Sidebar" />

<div class="top-questions">
    <div class="d-flex justify-content-between p-1">
        <h4 style="margin-left:5px;">@ViewData["Title"]</h4>
        <h5 style="margin-right:5px;" > <i style="font-size:18px;" class="fas fa-search"></i>Search </h5>
    </div>

    <div class="d-flex justify-content-between p-1">
        <form asp-controller="User" asp-action="QuestionTag" asp-area="" asp-route-returnUrl="/User/QuestionTag" enctype="multipart/form-data" method="post" asp-antiforgery="true">

            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

            <div class="form-group">
                <label asp-for="TitleInput">Question Title</label>
                <input type="text" asp-for="TitleInput" id="TitleInput" aria-required="true" class="form-control" placeholder="Enter question name .." >
            </div>


            <div class="form-group">
                <label asp-for="TagInput">Question Tag</label>
                <input type="text" asp-for="TagInput" id="TagInput" aria-required="true" class="form-control" placeholder="Enter question Tag .." >
            </div>

            <button type="submit" class="btn btn-primary btn-sm search-btn"><i style="font-size:14px;" class="fas fa-search"></i>Search </button>
            
        </form>
    </div>
    <div class="question-list">
        @{
            if (Model?.SearchedTagQs != null)
            {
                <h5>Searched Result For tag</h5>

                @foreach (var qs in Model?.SearchedTagQs)
                {
                    <div class="question">
                        <div class="question-body" id="question-body-@qs.Id">
                            <h3>@qs.Title </h3>

                            <div class="tags">
                                @{
                                    string[] tag = qs.Tags.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                                    // Convert array to list of strings
                                    List<string> tagList = new List<string>(tag);
                                    for (var i = 0; i < tagList.Count; i++)
                                    {
                                        <span class="tag">@tagList[i]</span>
                                    }
                                }

                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>


    <div class="question-list">
        @{
            if (Model?.SearchedTitleQs != null)
            {
                <h5>Searched Result For Question Title</h5>

                @foreach (var qs in Model?.SearchedTitleQs)
                {
                    <div class="question">
                        <div class="question-bodys" id="question-bodys-@qs.Id">
                            <h3>@qs.Title </h3>

                            <div class="tags">
                                @{
                                    string[] tag = qs.Tags.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                                    // Convert array to list of strings
                                    List<string> tagList = new List<string>(tag);
                                    for (var i = 0; i < tagList.Count; i++)
                                    {
                                        <span class="tag">@tagList[i]</span>
                                    }
                                }

                            </div>
                        </div>
                    </div>

                }
            }
        }
    </div>


</div>

<script>



    var questionBodies = document.getElementsByClassName("question-body");

    // Attach click event handler to each "question-body" div
    for (var i = 0; i < questionBodies.length; i++) {
        questionBodies[i].addEventListener("click", function () {
            // Extract the ID from the div's ID attribute
            var questionId = this.id.substring("question-body-".length); // Extract the part after the last hyphen


            // Construct the URL for the action with the ID parameter
            var url = '@Url.Action("QuestionDetails", "User")' + '?id=' + questionId;

            // Navigate to the constructed URL
            window.location.href = url;
        });
    }


    var questionBodis = document.getElementsByClassName("question-bodys");

    // Attach click event handler to each "question-body" div
    for (var i = 0; i < questionBodis.length; i++) {
        questionBodis[i].addEventListener("click", function () {
            // Extract the ID from the div's ID attribute
            var questionId = this.id.substring("question-bodys-".length); // Extract the part after the last hyphen


            // Construct the URL for the action with the ID parameter
            var url = '@Url.Action("QuestionDetails", "User")' + '?id=' + questionId;

            // Navigate to the constructed URL
            window.location.href = url;
        });
    }

</script>
