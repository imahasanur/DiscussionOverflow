// <auto-generated />
using System;
using DiscussionOverflow.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscussionOverflow.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");

                    b.HasData(
                        new
                        {
                            Id = new Guid("963c81f0-4bf3-4c91-961d-945c2d8872f8"),
                            AnswerBody = "lorem impsumlorem impsum lorem impsum lorem impsum",
                            QuestionId = new Guid("003805c3-938c-43b7-a768-03d6c0242ece"),
                            QuestionMaker = "skill1@gmail.com",
                            Replier = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("68503176-0314-4937-92e4-400a6f4f4472"),
                            AnswerBody = "lorem impsumlorem impsum lorem impsum lorem impsum",
                            QuestionId = new Guid("003805c3-938c-43b7-a768-03d6c0242ece"),
                            QuestionMaker = "skill1@gmail.com",
                            Replier = "skill2@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionMaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69a75666-c25d-4736-92f6-66bbbc08d926"),
                            CommentBody = "lorem impsumlorem impsum lorem impsum lorem impsum",
                            Commentator = "skill2@gmail.com",
                            QuestionId = new Guid("003805c3-938c-43b7-a768-03d6c0242ece"),
                            QuestionMaker = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cd19778a-fb86-4ac9-96a4-cd4c5b423018"),
                            AnswerId = new Guid("963c81f0-4bf3-4c91-961d-945c2d8872f8"),
                            CommentBody = "lorem impsum  lorem impsum lorem impsum lorem impsum ,,,,,,,,",
                            Commentator = "skill2@gmail.com",
                            Replier = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commentator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = new Guid("003805c3-938c-43b7-a768-03d6c0242ece"),
                            CurrentStatus = "lorem impsum de color sutracun lorem impsum de color lorem ipsum de color",
                            Details = "lorem impsum de color sutracun lorem impsum de color lorem ipsum de color",
                            QuestionMaker = "skill1@gmail.com",
                            Tags = "C,F,D",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified),
                            Title = "This is the test Question 1"
                        },
                        new
                        {
                            Id = new Guid("e580cf4d-fa7a-421d-8d0f-ab406d0a2e23"),
                            CurrentStatus = "lorem impsum de color sutracun lorem impsum de color lorem ipsum de color",
                            Details = "lorem impsum de color sutracun lorem impsum de color lorem ipsum de color",
                            QuestionMaker = "skill1@gmail.com",
                            Tags = "C,F,D,E",
                            TimeStamp = new DateTime(2024, 4, 12, 17, 36, 39, 0, DateTimeKind.Unspecified),
                            Title = "This is the test Question 2"
                        });
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DownVote")
                        .HasColumnType("int");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionMaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Replier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpVote")
                        .HasColumnType("int");

                    b.Property<string>("Voter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Vote");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a58e02ef-a025-492c-9746-1db9d2067d36"),
                            QuestionId = new Guid("003805c3-938c-43b7-a768-03d6c0242ece"),
                            QuestionMaker = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 18, 36, 39, 0, DateTimeKind.Unspecified),
                            UpVote = 1,
                            Voter = "skill2@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("6559b465-83ae-4005-a415-2e24d2728cc4"),
                            DownVote = 1,
                            QuestionId = new Guid("e580cf4d-fa7a-421d-8d0f-ab406d0a2e23"),
                            QuestionMaker = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 18, 36, 39, 0, DateTimeKind.Unspecified),
                            UpVote = 1,
                            Voter = "skill3@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("20ed9bee-e628-4c44-ba3d-b25a68827dcc"),
                            AnswerId = new Guid("963c81f0-4bf3-4c91-961d-945c2d8872f8"),
                            DownVote = 1,
                            Replier = "skill1@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 18, 36, 39, 0, DateTimeKind.Unspecified),
                            Voter = "skill2@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("6aaf6885-7b65-44a0-9e65-9b89c28f7673"),
                            AnswerId = new Guid("68503176-0314-4937-92e4-400a6f4f4472"),
                            DownVote = 1,
                            Replier = "skill2@gmail.com",
                            TimeStamp = new DateTime(2024, 4, 12, 18, 36, 39, 0, DateTimeKind.Unspecified),
                            UpVote = 1,
                            Voter = "skill3@gmail.com"
                        });
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageFileSize")
                        .HasColumnType("int");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PortfolioSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reputation")
                        .HasColumnType("int");

                    b.Property<string>("S3Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Answer", b =>
                {
                    b.HasOne("DiscussionOverflow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Comment", b =>
                {
                    b.HasOne("DiscussionOverflow.Domain.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("DiscussionOverflow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Notification", b =>
                {
                    b.HasOne("DiscussionOverflow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Domain.Entities.Vote", b =>
                {
                    b.HasOne("DiscussionOverflow.Domain.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("DiscussionOverflow.Domain.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationRoleClaim", b =>
                {
                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserClaim", b =>
                {
                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserLogin", b =>
                {
                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserRole", b =>
                {
                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiscussionOverflow.Infrastructure.Membership.ApplicationUserToken", b =>
                {
                    b.HasOne("DiscussionOverflow.Infrastructure.Membership.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
